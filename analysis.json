{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "# Anypoint styled version of the `paper-dropdown-menu` element.\n\nTo be used with the API Console that must be styled for the platform.\n\nThis is a faster, lighter version of `paper-dropdown-menu`, that does not\nuse a `<paper-input>` internally. Use this element if you're concerned about\nthe performance of this element, i.e., if you plan on using many dropdowns on\nthe same page. Note that this element has a slightly different styling API\nthan `paper-dropdown-menu`.\n`paper-dropdown-menu` is similar to a native browser select element.\n`paper-dropdown-menu` works with selectable content. The currently selected\nitem is displayed in the control. If no item is selected, the `label` is\ndisplayed instead.\n\nExample:\n\n     <paper-dropdown-menu-light label=\"Your favourite pastry\">\n       <paper-listbox class=\"dropdown-content\">\n         <paper-item>Croissant</paper-item>\n         <paper-item>Donut</paper-item>\n         <paper-item>Financier</paper-item>\n         <paper-item>Madeleine</paper-item>\n       </paper-listbox>\n     </paper-dropdown-menu-light>\n\nThis example renders a dropdown menu with 4 options.\nThe child element with the class `dropdown-content` is used as the dropdown\nmenu. This can be a [`paper-listbox`](paper-listbox), or any other or\nelement that acts like an [`iron-selector`](iron-selector).\nSpecifically, the menu child must fire an\n[`iron-select`](iron-selector#event-iron-select) event when one of its\nchildren is selected, and an [`iron-deselect`](iron-selector#event-iron-deselect)\nevent when a child is deselected. The selected or deselected item must\nbe passed as the event's `detail.item` property.\nApplications can listen for the `iron-select` and `iron-deselect` events\nto react when options are selected and deselected.\n\n### Styling\n\nThe following custom properties and mixins are also available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-dropdown-menu` | A mixin that is applied to the element host | `{}`\n`--paper-dropdown-menu-disabled` | A mixin that is applied to the element host when disabled | `{}`\n`--paper-dropdown-menu-disabled-opacity` | The opacity of the dropdown when disabled  | `0.33`\n`--paper-dropdown-menu-button` | A mixin that is applied to the internal menu button | `{}`\n`--paper-dropdown-menu-icon` | A mixin that is applied to the internal icon | `{}`\n`--paper-dropdown-menu-color` | The color of the input/label/underline when the dropdown is unfocused | `--primary-text-color`\n`--paper-dropdown-menu-focus-color` | The color of the label/underline when the dropdown is focused  | `--primary-color`\n`--paper-dropdown-error-color` | The color of the label/underline when the dropdown is invalid  | `--error-color`\n`--paper-dropdown-menu-label` | Mixin applied to the label | `{}`\n`--paper-dropdown-menu-input` | Mixin appled to the input | `{}`\n`--paper-dropdown-menu-border-color` | Color of the border of the dropdown when opened | `var(--anypoint-color-aluminum4)`\n`--paper-dropdown-menu-label-opened-color` | Color of the label when opened | `rgba(0, 0, 0, 0.24)`",
      "summary": "",
      "path": "paper-dropdown-menu.html",
      "properties": [
        {
          "name": "keyBindings",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 4
            },
            "end": {
              "line": 403,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "menuButton",
          "type": "HTMLElement",
          "description": "A reference to `paper-menu-button` element",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 408,
              "column": 4
            },
            "end": {
              "line": 416,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "contentElement",
          "type": "?",
          "description": "The content element that is contained by the dropdown menu, if any.\n     ",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 462,
              "column": 4
            },
            "end": {
              "line": 469,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "selectedItemLabel",
          "type": "string | null | undefined",
          "description": "The derived \"label\" of the currently selected item. This value\nis the `label` property on the selected item if set, or else the\ntrimmed text content of the selected item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 305,
              "column": 8
            },
            "end": {
              "line": 309,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "selectedItem",
          "type": "?Object",
          "description": "The last selected item. An item is selected if the dropdown menu has\na child with class `dropdown-content`, and that child triggers an\n`iron-select` event with the selected `item` in the `detail`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_selectedItemChanged\"",
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "value",
          "type": "string | null | undefined",
          "description": "The value for this element that will be used when submitting in\na form. It is read only, and will always have the same value\nas `selectedItemLabel`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 8
            },
            "end": {
              "line": 332,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_valueChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "label",
          "type": "string | null | undefined",
          "description": "The label for the dropdown.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 8
            },
            "end": {
              "line": 338,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "placeholder",
          "type": "string | null | undefined",
          "description": "The placeholder for the dropdown.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 342,
              "column": 8
            },
            "end": {
              "line": 344,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "opened",
          "type": "boolean | null | undefined",
          "description": "True if the dropdown is open. Otherwise, false.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 348,
              "column": 8
            },
            "end": {
              "line": 354,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_openedChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "allowOutsideScroll",
          "type": "boolean | null | undefined",
          "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 361,
              "column": 8
            },
            "end": {
              "line": 364,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "horizontalAlign",
          "type": "string | null | undefined",
          "description": "The orientation against which to align the menu dropdown\nhorizontally relative to the dropdown trigger.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 369,
              "column": 8
            },
            "end": {
              "line": 372,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"right\""
        },
        {
          "name": "verticalAlign",
          "type": "string | null | undefined",
          "description": "The orientation against which to align the menu dropdown\nvertically relative to the dropdown trigger.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 377,
              "column": 8
            },
            "end": {
              "line": 381,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"top\""
        },
        {
          "name": "hasContent",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 382,
              "column": 8
            },
            "end": {
              "line": 386,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "dynamicAlign",
          "type": "boolean | null | undefined",
          "description": "If true, the `horizontalAlign` and `verticalAlign` properties will\nbe considered preferences instead of strict requirements when\npositioning the dropdown and may be changed if doing so reduces\nthe area of the dropdown falling outside of `fitInto`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 393,
              "column": 8
            },
            "end": {
              "line": 393,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_renderValue",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 394,
              "column": 8
            },
            "end": {
              "line": 394,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "Ensures attributes and registers listeners.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 425,
              "column": 4
            },
            "end": {
              "line": 450,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "Removes listeners",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 454,
              "column": 4
            },
            "end": {
              "line": 457,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clickHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 471,
              "column": 4
            },
            "end": {
              "line": 475,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "open",
          "description": "Show the dropdown content.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 480,
              "column": 4
            },
            "end": {
              "line": 482,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "close",
          "description": "Hide the dropdown content.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 486,
              "column": 4
            },
            "end": {
              "line": 488,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onIronSelect",
          "description": "A handler that is called when `iron-select` is fired.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 494,
              "column": 4
            },
            "end": {
              "line": 496,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent",
              "description": "An `iron-select` event."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onIronDeselect",
          "description": "A handler that is called when `iron-deselect` is fired.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 503,
              "column": 4
            },
            "end": {
              "line": 505,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selectedItemChanged",
          "description": "Compute the label for the dropdown given a selected item.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 513,
              "column": 4
            },
            "end": {
              "line": 523,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selectedItem",
              "type": "Element",
              "description": "A selected Element item, with an\noptional `label` property."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getValidity",
          "description": "Returns false if the element is required and does not have a selection,\nand true otherwise.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 531,
              "column": 4
            },
            "end": {
              "line": 533,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "true if `required` is false, or if `required` is true\nand the element has a valid selection."
          }
        },
        {
          "name": "_openedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 535,
              "column": 4
            },
            "end": {
              "line": 542,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeLabelVisible",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 543,
              "column": 4
            },
            "end": {
              "line": 545,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hasContent"
            },
            {
              "name": "opened"
            }
          ]
        },
        {
          "name": "_computeDefaultVisible",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 547,
              "column": 4
            },
            "end": {
              "line": 549,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hasContent"
            }
          ]
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 551,
              "column": 4
            },
            "end": {
              "line": 553,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 290,
          "column": 2
        },
        "end": {
          "line": 554,
          "column": 3
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "AnypointElements.PaperDropdownMenu",
      "attributes": [
        {
          "name": "selected-item-label",
          "description": "The derived \"label\" of the currently selected item. This value\nis the `label` property on the selected item if set, or else the\ntrimmed text content of the selected item.",
          "sourceRange": {
            "start": {
              "line": 305,
              "column": 8
            },
            "end": {
              "line": 309,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "selected-item",
          "description": "The last selected item. An item is selected if the dropdown menu has\na child with class `dropdown-content`, and that child triggers an\n`iron-select` event with the selected `item` in the `detail`.",
          "sourceRange": {
            "start": {
              "line": 317,
              "column": 8
            },
            "end": {
              "line": 322,
              "column": 9
            }
          },
          "metadata": {},
          "type": "?Object"
        },
        {
          "name": "value",
          "description": "The value for this element that will be used when submitting in\na form. It is read only, and will always have the same value\nas `selectedItemLabel`.",
          "sourceRange": {
            "start": {
              "line": 328,
              "column": 8
            },
            "end": {
              "line": 332,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "label",
          "description": "The label for the dropdown.",
          "sourceRange": {
            "start": {
              "line": 336,
              "column": 8
            },
            "end": {
              "line": 338,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "placeholder",
          "description": "The placeholder for the dropdown.",
          "sourceRange": {
            "start": {
              "line": 342,
              "column": 8
            },
            "end": {
              "line": 344,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "opened",
          "description": "True if the dropdown is open. Otherwise, false.",
          "sourceRange": {
            "start": {
              "line": 348,
              "column": 8
            },
            "end": {
              "line": 354,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "allow-outside-scroll",
          "description": "By default, the dropdown will constrain scrolling on the page\nto itself when opened.\nSet to true in order to prevent scroll from being constrained\nto the dropdown when it opens.",
          "sourceRange": {
            "start": {
              "line": 361,
              "column": 8
            },
            "end": {
              "line": 364,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "horizontal-align",
          "description": "The orientation against which to align the menu dropdown\nhorizontally relative to the dropdown trigger.",
          "sourceRange": {
            "start": {
              "line": 369,
              "column": 8
            },
            "end": {
              "line": 372,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "vertical-align",
          "description": "The orientation against which to align the menu dropdown\nvertically relative to the dropdown trigger.",
          "sourceRange": {
            "start": {
              "line": 377,
              "column": 8
            },
            "end": {
              "line": 381,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "has-content",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 382,
              "column": 8
            },
            "end": {
              "line": 386,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "dynamic-align",
          "description": "If true, the `horizontalAlign` and `verticalAlign` properties will\nbe considered preferences instead of strict requirements when\npositioning the dropdown and may be changed if doing so reduces\nthe area of the dropdown falling outside of `fitInto`.",
          "sourceRange": {
            "start": {
              "line": 393,
              "column": 8
            },
            "end": {
              "line": 393,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "selected-item-label-changed",
          "description": "Fired when the `selectedItemLabel` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selected-item-changed",
          "description": "Fired when the `selectedItem` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "opened-changed",
          "description": "Fired when the `opened` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [
        {
          "description": "",
          "name": "dropdown-content",
          "range": {
            "start": {
              "line": 219,
              "column": 8
            },
            "end": {
              "line": 219,
              "column": 69
            }
          }
        }
      ],
      "tagname": "paper-dropdown-menu",
      "mixins": [
        "Polymer.IronButtonState",
        "Polymer.IronControlState",
        "Polymer.IronValidatableBehavior",
        "Polymer.IronA11yKeysBehavior"
      ]
    }
  ]
}
